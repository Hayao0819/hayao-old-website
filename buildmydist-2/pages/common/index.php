<!DOCTYPE html>
<html lang="ja">
<head>

    <?php
        // ページ設定
        $title = "共通のこと";
        $commonhtml = "${_SERVER['DOCUMENT_ROOT']}/buildmydist-2/commonhtml";
        $distro = "common";

        // 共通ファイルを読み込み
        $domain = $_SERVER['HTTP_HOST'];
        include("${commonhtml}/head.php");
    ?>

</head>
<body>
    <?php include("${commonhtml}/beforemain.php"); ?>

    <main>
        <h2>ディストリ開発を始める準備</h2>
        <p>どのOSをベースにするかに関わらず共通の準備があります。方針を決めたり開発環境を整えたり...とね</p>
        
        <h2>作成するもののコンセプトを決める</h2>
        <p>まずはコンセプトを決めましょう。それ次第で内容が大きく変わってきます。</p>
        <ul>
            <li>CLIの緊急時用のOS</li>
            <li>自分が好きなパッケージだけを入れていつもの環境</li>
            <li>特定のハードウェアに最適化したもの</li>
            <li>最低限のGUIだけで構築した環境</li>
        </ul>
        <p>などの目的とターゲットをよくよく考えて決める必要が有ります。おすすめは「自分のメイン環境に近いカスタマイズを施す」です。</p>
        <p>OSのインストール後やライブCDの起動時に自分がいつも使う環境が整っているというのは一種の感動があります。</p>

        <h2>開発環境の構築</h2>
        <h3>必要なもの</h3>
        <p>必要なものがそれなりにいろいろとあるので、順番に見ていきます。</p>
        <p>まずは「物的」に必要なものです</p>
        <ul>
            <li>仮想マシンと総合開発環境を動かせる程度の性能のあるマシン</li>
            <li>最低でも500GBの容量のディスク（できればSSDが良い）</li>
            <li>仮想化ソフトウェア（Qemu、VirtualBox、VMware Workstation Player）</li>
            <li>実機起動用のDVD-R(W) or USBメモリ（3.0以降で8GB以上を推奨）</li>
        </ul>

        <p>次に能力的に必要なものです</p>
        <ul>
            <li>中学生程度の英語を読める程度の能力 or エラーやドキュメントなどを機械翻訳して読める程度の能力</li>
            <li>CLI画面でコマンドを打ったりログを見たりできる程度の能力</li>
            <li>シェルスクリプトで順次処理を実行できる程度の能力</li>
            <li>パッケージとデスクトップ環境をカスタマイズできる程度の能力</li>
            <li>（場合によっては）自分でパッケージを開発できる程度の能力</li>
            <li>（開発を本格的に行いたい場合は）そこそこのシェルスクリプトが書ける程度の能力</li>
            <li>このサイトの内容を理解できる程度の能力</li>
        </ul>
        
        <p>最後に時間的に必要なことです</p>
        <ul>
            <li>（PCの性能にもよるが）一度のビルドにかかる時間（10分から2時間ほど？）</li>
            <li>定期的にパッケージを更新する時間（isoファイルに含めるパッケージを更新する）</li>
            <li>（特にGnomeなどは）最新の上流の更新に追従して互換性の無くなった変更などに対応する時間</li>
        </ul>
        <p>個人で自分だけで使う場合はそこまで重要でもないですが、ネット上で配布などをする場合にはとても重要になります</p>
        <p>詳細を下でいろいろと見ていきます。</p>

        <h4>仮想マシンと総合開発環境を動かせる程度の性能のあるマシン</h4>
        <p>ディストリのビルドは全てスクリプトで自動化して行いますが、スクリプトは主に以下のことを行っています</p>
        <p>（Ubuntuだけはスクリプトの内容は大きく異なります。スクリプトがやってくれないことがあるのでそれを自分で行います。）</p>
        <ol>
            <li>ベースを作成（pacstrap baseやdebootstrapなど）</li>
            <li>
                追加のパッケージをインストール<br>
                AlterISOなどのAURパッケージのビルドも行うのでここでかなりの時間を使います
            </li>
            <li>ライブ環境で起動するためのブートローダーの設定</li>
            <li>ライブ環境で起動するための内部設定をchrootで実行</li>
            <li>作成されたrootfsをSquashFsに圧縮</li>
            <li>作成されたブートローダー用のファイルとSquashfsを集めてディスクイメージを作成</li>
            <li>（AlterISOのオプション次第ではこの後にrootfsをtarballにまとめたりする）</li>
        </ol>
        <p>Linuxまるまるのパッケージを全てダウンロードし、それを全て展開した後にまた圧縮し直すという作業を行いますので、かなりのCPUとネットワーク回線が要求されます。</p>
        <p>筆者のCPUはSandy世代でとても高性能とは言えないので山D（Fascodeのえらいひと）にサーバを借りてビルドしています</p>
        <p>最低でも3GB以上のパッケージをダウンロードし、tarの圧縮を快適に行えるPCを用意しましょう</p>
        <p>また、（Ubuntuなどでは必須になりますが）OSを実行する仮想環境も必要になってきます</p>
        <p>仮想環境については<a href="/buildmydist-2/pages/misc/virtual/">こちら</a>を参照してください</p>

        <h4>最低でも500GBの容量のディスク</h4>
        <p>先程のビルドの要約を見るとわかりますが、主な処理はパッケージのインストールとコマンド実行です。</p>
        <p>ダウンロードしたパッケージをキャッシュしたり、作業ディレクトリに展開したりとかなり大量のディスクを使用します。</p>
        <p>さらに、ビルドしたisoは約2~3GBもあります。過去のバージョンなども保存っしておくとあっという間にHDDを食ってしまいます</p>

        <h4>仮想化ソフトウェア（Qemu、VirtualBox、VMware Workstation Player）</h4>
        <p>ビルドしたOSは基本的に仮想環境でテストを繰り返すことになります。</p>
        <p>複数の仮想環境でテストをして、環境依存の問題などを確認するために複数の仮想環境でテストを行います。</p>
        <p>全て無料で利用できるソフトウェアで、様々な用途に利用できるのでインストールしておきましょう。</p>
        <p>詳しくは<a href="/buildmydist-2/pages/misc/virtual/">こちら</a>を参照してください</p>

        <h4>中学生程度の英語を読める</h4>
        <p>Linuxのエラーはほぼ全て英語で書かれています。そのため英語が読めないと何も出来ません</p>
        <p>といっても、<code>No such file or directory</code>というようなかんたんな英語しか無いのでそこまで心配する必要はありません。どうしても英語が苦手という人はGoogle翻訳とDeeplを使うとかなり正確な翻訳を得ることが出来ます。</p>
        

        <h4>コマンドを打ったりログを見たりできる</h4>
        <p>ビルドスクリプトの実行や、デバッグなどはほとんどがCLI上での作業になります。（GUIが起動しない場合などで特に）</p>
        <p>また、実機テストで起動しなかった場合やインストールに失敗した場合などのレスキュー作業もCLIになります。</p>
        <p>まだLinuxになれきってない人は少々難しいかもしれません</p>
        <p><code>ls</code>や<code>cd</code>、<code>cut</code>や<code>less</code>、<code>grep</code>などは覚えておきましょう</p>
        <p>また、<code>systemctl</code>と<code>journald</code>もなれておくと良いでしょう</p>

        <h4>シェルスクリプトで順次処理を実行できる</h4>
        <p>特にArch Linuxやfedoraをベースとする場合に重要です。先程の構築の手順を見るとわかりますが、パッケージのインストール後にシステムの設定を行います。</p>
        <p>このシステムの設定は全てシェルコマンドを実行して行われます。変数を扱える程度のシェルスクリプトの知識が必要になってきます。</p>

        <h4>このサイトの内容を理解できる</h4>
        <p>一番重要です。</p>

        <h3>必要なソフトウェアのインストール</h3>
        <p>最低限でもテキストエディタと仮想マシンが必要になります。</p>
        <p>また、FedoraやArch、Alterをベースに開発を行う場合には実機で動作するLinuxが必要になります。</p>
        <p>（よっぽどマシンスペックに自信があるのなら仮想マシンでもいいですが、性能が低いとビルドにものすごく時間がかかります）</p>
        <p>Fedoraをベースに開発をするのなら実機のFedora、ArchやAlterで開発をするのなら実機のArchやAlter が必要になります。</p>
        <p>（正確にはArch LinuxさえあればFedoraもカバーできるのですが、環境構築が大変なので割愛します）</p>
        <br>
        <p>おすすめのテキストエディタエディタはVisual Studio Codeですが、下手すると戦争になりかねないので自分の好きなものを使いましょう。間違ってもnotepad.exeはやめましょう。</p>
        <p>（このサイトを読んでる人ならこれくらいの環境構築はかんたんだと思うので細かい説明は割愛します）</p>
        <p>ベースとなるディストリによって準備するものも異なるので、それは各ページで解説を行います。</p>

        <h3>ベースになるディストリを決めよう</h3>
        <p>イチからlinuxディストリビューションを構築するのはものすごく大変です。</p>
        <p>（Linux from Scratchというプロジェクトがあるので、「俺はどうしても1からがええんじゃ！」と言う方はそちらを参考にしてください。）</p>
        <p>そのため、このサイトでは様々な主要ディストリを改造する形で開発を行っていこうと思います。</p>
        <p>世の中には数え切れないほどのディストリがありますが、だいたい以下に分類することができます。</p>
        <p>（厳密にはLinuxではないUnix系は省略します。また、あくまで大雑にですので細かい部分は異なります。）</p>
        <ul>
            <li>
                <b>Debian系</b>
                <ul>
                    <li>
                        Ubuntu系
                        <ul>
                            <li>Xubuntu</li>
                            <li>Lubuntu</li>
                            <li>Kubuntu</li>
                            <li>Serene Linux</li>
                        </ul>
                    </li>
                    <li>Kali Linux</li>
                    <li>Kona Linux</li>
                </ul>
            </li>
            <li>
                <b>RHEL系</b>
                <ul>
                    <li>Redhat Enterprise Linux</li>
                    <li>Cent OS</li>
                    <li>Fedora</li>
                    <li>RedStar OS</li>
                </ul>
            </li>
            <li>
                <b>Arch Linux系</b>
                <ul>
                    <li>Black Arch Linux</li>
                    <li>Manjaro Linux</li>
                    <li>Arch Linux ARM</li>
                    <li>Artix Linux</li>
                    <li>Alter Linux</li>
                </ul>
            </li>
            <li>Slack Ware系</li>
            <li>Gentoo Linux系</li>
            <li>その他いろいろ（多いので割愛）</li>
        </ul>
        <p>主な違いはパッケージマネージャとリポジトリです。Arch Linux系はpacmanを採用しており、Debian系はaptになっています。</p>
        <p>Arch Linuxは最新だけどちょっと不安定、Manjaroはバージョンは古いけど安定したパッケージ、Ubuntuは最適化されて安定したパッケージ...とそれぞれに特徴が有ります。</p>
        <p>「とりあえず試しに作ってみたい」という人はUbuntuをおすすめしますが、いろいろ問題があります。（以下で詳しく説明します。）</p>
        <p>そういったそれぞれの特徴を考えてどのディストリをベースにするかを決定しましょう。</p>
        <p>また、このサイトで解説しているのはハヤオが開発したことがあるものだけです。GentooやSlackware、BSDなどの知識はほぼ皆無なのでこのサイトでは解説しません。</p>

        <h4>Ubuntu系の問題点</h4>
        <p>FedoraやArchは全てテキストベースのソースコードで管理することができます（すなわちGitなどのバージョン管理システムを使えます）</p>
        <p>しかし、Ubuntu系だけは「実際に仮想環境上に構築されたものをisoファイルに直接圧縮する」というものになっています。</p>
        <p>そのためバージョン管理がしにくく、また内部の最適化がしにくいという問題があります。長期的な開発には向いていないので注意してください。</p>

        <h2>注意点</h2>
        <p>ディストリを開発する際には必ずいくつかの注意点が有ります。</p>
        <ul>
            <li>個人情報を含まないようにする</li>
            <li>再配布が可能なものかを確認する</li>
            <li>GPLライセンスに違反していないかどうかを確認する</li>
            <li>違法なものが含まれていないかどうかを確認する</li>
            <li>様々なマシンで起動される可能性が有ることを十分に考慮する</li>
            <li>不特定多数のユーザーが使用するということを忘れない</li>
        </ul>
        <p>ネットに一度上げたものは二度と消えないということを忘れないようにしましょう。</p>
        <p>（個人的に最初期のSereneLinuxは黒歴史みたいなもんです）</p>

        <h2>おわり</h2>
        <p>ここまでお疲れ様でした。ディストリ開発を始める最初のステップはこれで終わりです。</p>
        <p>それそれのディストリのページで次の手順に進みましょう。</p>

    </main>

    <?php include("${commonhtml}/aftermain.php"); ?>
</body>
</html>
